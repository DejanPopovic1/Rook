Todo List once V.basic programm works


Redo applicable actions based on this recording
Play the computer which randomises these legal moves
Incorporate Minimax algorithm


genQuieteMoves and genAttackMoves
Use one function to generate all piece moves and general genSuccStates optimisation

Before doing a complete test, have the ability to BACKTRACK moves. This is added functionality aswell as eases the heck out of testing


BENCHMARK
bAll and wAll to be included as part of state
Functions that are inlined for performance in one file but not inlined in another should be defined in the header file and not .c file! An example of this is functions in binUtils
Establish BENCHMARKING before starting efficiency gains
make UCI compatible
make front end compatible
Makefile and build instructions for MS aswell
address all comments above various functions
Refactor codebase
Use C++ in select areas
move inline .asm to .asm file(s)
Move functions to their correct files. E.g. most functions move to state.c
Inline the important move generation functions
use pointers in as many areas as possible
Use more asserts instead of exit(-1)
When mallocing a list and then setting its free index to zero, rather do this in a create function
Expose the "system output" functions like valid list of moves, to the user
Show ply number
Show whos turn it is
denote moves using algebraic notation
Even in multi player, you can denote what the best move is at any point in time! This is good analysis in analysing what your move in a game should have done
Import PNG at any step into multi-player
Develop Minmax tree
Complete play against AI
Highlight from and to tiles
DONT FORGET TO FREE ALL MALLOCS!
Try making function pointer to iterating through the board. This will then be shared across all functions that iterate board
Error handle all malloc allocations by defining your own "wrapper" function
Move copyState into GlobalDeclarations
When creating and allocating memory for structs, make a single function that does this and intialises freeIndex to zero
We have allocated memory for strings but have not possible allocated space for null terminating character - check this
Apply const correctness
Address all compiler warnings
Cycle through previous commands
Provide USER HINTS for the next best move
Duplicate version to Linux
Thread usage and ponder functionality
High performance threading for multicore usage
Undo Move
Randomise AI moves or keep fixed (option)
Set difficulty
Set heuristics
Display time
Timed/non timed game as argument to starting new game (multiplayer and against AI)
struct to keep all user settings as a conf object
export to PNG notation (plus optional export settings)
choose movement notation
Choose search tree algorithm Minmax and Alpha Beta
Function declarations
Neaten up file structure
Opening libraries
Read on chess engine optimisations wiki
Display Heuristic score
Change the 2x2 int chessboard to a 2x2 char chessboard
Encode the chessboard into a another format
Change encoding format as the board density progresses
Add transposition table
Add Zobrist hashing/BCH hashing and therefore make a function 
Ability to select encodings
Ability to configure encodings along halfPlys 0+ for every half ply
Benchmark table
Pseudo legal move generation to legal move generation
enumerate piece TYPES (for the purposes of move generation) as colour agnostic except for the pawns
Late move reductions?
current ASM instruction only compatible with GCC. Make compatible with other major compilers
Move ALL command line outputs into a seperate file where you can reword the outputs
Depending on Windows or Linux, optionally compile using #if and #endif
Add program options included in this link: https://www.gnu.org/software/xboard/manual/html_node/Chess-engine-options.html
Transposition Table
Killer Heuristics or knowing which alpha beta branches to prune
Add statistics like average branching factor
Opening book: https://www.chessprogramming.org/Opening_Book


toAlgNotation must specify # and +